const Instructor = require('../Models/InstructorSchema');
const mongoose = require('mongoose')
const bcrypt= require('bcrypt')

// get all instructors
const getInstructors = async (req, res) => {
    const instructors = await Instructor.find({}).sort({createdAt: -1})
  
    res.status(200).json(instructors)}

// get a single instructor
const getInstructor = async (req, res) => {
    const { id } = req.params
  
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(404).json({error: 'No such instructor'})
    }
  
    const instructor = await Instructor.findById(id)
  
    if (!instructor) {
      return res.status(404).json({error: 'No such instructor'})
    }
  
    res.status(200).json(instructor)
  }

  // create a new instructor
const createInstructor = async (req, res) => {
  const {name,username, password,email} = req.body

    let emptyFields = []

  if (!name) {
    emptyFields.push('title')
  }
  if (!username) {
    emptyFields.push('username')
  }
  if (!password) {
    emptyFields.push('password')
  }
  if (emptyFields.length > 0) {
    return res.status(400).json({ error: 'Please fill in all fields', emptyFields })
  }
  
    // add to the database
    // try {
    //   const salt= await bcrypt.genSalt(10)
    //   const hash= await bcrypt.hash(password, salt)

    //   const instructor = await this.create({ name,username,password:hash,email})
    //   res.status(200).json(instructor)
    // } catch (error) {
    //   res.status(400).json({ error: error.message })
    // }
    const salt= await bcrypt.genSalt(10)
    const hash= await bcrypt.hash(password, salt)
    const instructor = await this.create({ name,username,password:hash,email})
    return instructor
  }

// delete a instructor
const deleteInstructor = async (req, res) => {
    const { id } = req.params
  
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({error: 'No such instructor'})
    }
  
    const instructor = await Instructor.findOneAndDelete({_id: id})
  
    if(!instructor) {
      return res.status(400).json({error: 'No such instructor'})
    }
  
    res.status(200).json(instructor)
  }

  // update a instructor
const updateInstructor = async (req, res) => {
    const { id } = req.params
  
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({error: 'No such instructor'})
    }
  
    const instructor = await Instructor.findOneAndUpdate({_id: id}, {
      ...req.body
    })
  
    if (!instructor) {
      return res.status(400).json({error: 'No such instructor'})
    }
  
    res.status(200).json(instructor)
  }

  const setCountry = async (req, res) => {
   const {id, country} = req.body;
    const instructor = await Instructor.findOneAndUpdate({_id: id}, { $set :{country: country}
    })
  
    if (!instructor) {
      return res.status(400).json({error: 'No such instructor'})
    }
  
    res.status(200).json(instructor)
  }

  const getRatings = async(req,res)=>{
    const {id} = req.body
    try{
      const ratings = await Instructor.find({_id:id}, {rating:1})
      res.status(200).json(ratings)
    }
    catch(error){
      return res.status(400).json({error: error.message})
    }
  }

  const AddRatings = async(req,res)=>{
    const{id, rating}= req.body

    try{
      const instructor = await Instructor.findOneAndUpdate({_id: id}, {$push:{rating}})
      res.status(200).json(instructor);
    }
    catch(error){
      return res.status(400).json({error: error.message})
    }
  }

  module.exports = {
    getInstructors,
    getInstructor,
    createInstructor,
    deleteInstructor,
    updateInstructor,
    setCountry,
    getRatings,
    AddRatings
  }
/*async function AddInstructorHelper (InstructorInsert){
    
    var { MongoClient }= require('mongodb');
    var uri = "mongodb+srv://aclProj:ackProjPassword@cluster0.hjrz1bm.mongodb.net/ProjDB?retryWrites=true&w=majority";
    var client = new MongoClient(uri, {useNewUrlParser: true, useUnifiedTopology: true});

    await client.connect();
    var list = await client.db('ProjDB').collection('instructors').find().toArray();
    var flag = true;
    for (let i = 0; i<list.length; i++)
    {
      if( list[i].username=== InstructorInsert.username)
      {
        flag = false;
        break;
      }
    }
    if (flag === true)
    {
        await client.db('ProjDB').collection('instructors').insertOne(InstructorInsert);
    }
    client.close();
    return flag;
}*/

